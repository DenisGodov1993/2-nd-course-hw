// Задание 1. Скрытие и показ текста
// Задача: cоздайте кнопку, которая будет скрывать и показывать текст в заголовке <h1>.

// Инструкция:
// 1. В HTML создайте заголовок <h1> с текстом и кнопку.
// 2. Используйте метод querySelector для получения ссылок на заголовок и кнопку.
// 3. Используйте событие click и метод addEventListener, чтобы скрывать и показывать 
// заголовок при нажатии на кнопку.

// Как должно работать: нажатие на кнопку «Скрыть» скрывает текст заголовка. 
// Повторное нажатие показывает текст снова.

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Созданы заголовок и кнопка.
// - Для получения ссылки используется метод querySelector.
// - Чтобы скрывать и показывать заголовок, используются событие click и 
// метод addEventListener.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

// const titleEl = document.querySelector('.title');
// const btnEl = document.querySelector('.btn');

// btnEl.addEventListener('click', function () {
    
//     if (titleEl.parentNode) {
//         titleEl.remove();
//         btnEl.textContent = 'Показать';
//     } else {
//         document.body.append(titleEl);
//         btnEl.textContent = 'Скрыть';
//     }
// });

// Задание 2. Изменение стиля элемента
// Задача: создайте кнопку, которая изменяет цвет текста в элементе <p>.

// Инструкция:
// 1. В HTML создайте абзац <p> и кнопку.
// 2. Используйте метод querySelector для получения ссылки на абзац и кнопку.
// 3. Используйте событие click и метод addEventListener, чтобы изменить стиль элемента, 
// например его цвет.

// Как должно работать: нажатие на кнопку «Изменить цвет» делает текст абзаца синим.

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Созданы абзац и кнопка.
// - Для получения ссылок используется метод querySelector.
// - Чтобы изменять стиль элемента, используются событие click и метод addEventListener.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

// const textEl = document.querySelector('.text');
// const btnEl = document.querySelector('.btn');

// btnEl.addEventListener('click', function () {
//     textEl.style.color = 'blue'; 
// });

// Задание 3. Динамическое изменение текста
// Задача: создайте кнопку, которая меняет текст в заголовке <h1>.

// Инструкция:
// 1. В HTML создайте заголовок <h1> с текстом и кнопку.
// 2. Используйте метод querySelector для получения ссылки на заголовок и кнопку.
// 3. Используйте событие click и метод addEventListener, чтобы изменить текст заголовка 
// при нажатии на кнопку.

// Как должно работать: нажатие на кнопку «Изменить текст» меняет текст заголовка 
// на «Привет, мир!».

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Созданы заголовок и кнопка.
// - Для получения ссылок используется метод querySelector.
// - Чтобы изменять текст заголовка, используются событие click и метод addEventListener.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

// const titleEl = document.querySelector('.title');
// const btnEl = document.querySelector('.btn');

// btnEl.addEventListener('click', function () {
//     titleEl.textContent = 'Привет, мир!';
// });

// Задание 4. Поиск и изменение элементов по классу
// Задача: найдите все элементы с классом description и измените их текст 
// на «Измененный текст».

// Инструкция:
// 1. В HTML создайте несколько элементов с классом description.
// 2. Используйте метод querySelectorAll для поиска всех элементов с этим классом.
// 3. Переберите найденные элементы и измените их текстовое содержимое с помощью 
// свойства textContent.

// Как должно работать: после выполнения скрипта все элементы с классом description 
// изменяют свой текст на «Измененный текст».

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Создано несколько элементов description.
// - Для получения ссылок используется метод querySelector.
// - Чтобы изменять текстовое содержимое элементов, используется свойство textContent.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

// const descriptionEl = document.querySelectorAll('.description');

// descriptionEl.forEach(function(descriptionEl) {
//     descriptionEl.textContent = 'Измененный текст';
// });

// Задание 5. Работа с querySelectorAll
// Задача: создайте несколько элементов <p> с разными классами. 
// Используйте querySelectorAll, чтобы найти все элементы с 
// классом description и изменить их текст.

// Инструкция:
// 1. В HTML создайте несколько абзацев <p>, некоторые из них должны иметь 
// класс description.
// 2. Используйте querySelectorAll для поиска всех элементов с классом description.
// 3. Переберите найденные элементы и измените их текстовое содержимое.

// Как должно работать: после выполнения скрипта все элементы с классом description 
// изменяют свой текст на «Новый текст».

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Создано несколько абзацев, как минимум два из них имеют класс description.
// - Для поиска элементов используется метод querySelectorAll.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

// const descriptionEl = document.querySelectorAll('.description');
// const titleEl = document.querySelector('.title');
// const textEl = document.querySelector('.text');
// const headerEl = document.querySelector('.header');

// descriptionEl.forEach(function(descriptionEl) {
//     descriptionEl.textContent = 'Новый текст';
// });

// Задание 6. Добавление нового элемента в DOM
// Задача: создайте кнопку, которая добавляет новый элемент <p> с 
// текстом в конец документа.

// Инструкция:
// 1. В HTML создайте кнопку.
// 2. Используйте метод createElement для создания нового элемента.
// 3. Используйте appendChild для добавления нового элемента в конец документа 
// при нажатии на кнопку.

// Как должно работать: нажатие на кнопку «Добавить элемент» добавляет в конец 
// страницы новый абзац с текстом «Новый абзац».

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Создана кнопка, добавляющая новый элемент. Для создания нового элемента 
// используется метод createElement.
// - Для добавления элемента используется метод appendChild.
// - Элемент добавляется в конец документа.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

// const btnEl = document.querySelector('.btn');

// btnEl.addEventListener('click', function () {
//     const newP = document.createElement('p');
//     newP.textContent = 'Новый абзац';
//     document.body.appendChild(newP);
// });

// Задание 7. Удаление элемента
// Задача: создайте кнопку, которая удаляет первый элемент <p> с классом description.

// Инструкция:
// 1. В HTML создайте несколько абзацев <p>, некоторые из них должны иметь класс description.
// 2. Используйте метод querySelector для поиска первого элемента с классом description.
// 3. Используйте метод remove для удаления этого элемента при нажатии на кнопку.

// Как должно работать: нажатие на кнопку «Удалить элемент» удаляет первый абзац с 
// классом description со страницы.

// Критерии оценки
// Работа будет оценена по следующим критериям:
// - Создано несколько абзацев, как минимум два из них имеют класс description.
// - Для поиска первого элемента с классом description используется метод querySelector.
// - Для удаления элемента при нажатии на кнопку используется метод remove.
// - Результат работы загружен на GitHub, отправлена ссылка на pull request.

const btnEl = document.querySelector('.btn');
const descriptionEl = document.querySelector('.description');
const titleEl = document.querySelector('.title');
const textEl = document.querySelector('.text');

btnEl.addEventListener('click', function () {
    const descriptionEl = document.querySelector('.description');
    descriptionEl.remove()
});